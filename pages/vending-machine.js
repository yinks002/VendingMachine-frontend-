import Head from 'next/head' 
import {useState,useEffect} from 'react'
import Web3 from 'web3'
import vendingMachineContract from '../blockchain/vending.js'
import 'bulma/css/bulma.css'
// import styles from '../styles/VendingMAchine.module.css'
const VendingMachine= ()=> {
	const[error,SetError]=useState('')
	const [successMsg,setSuccessMsg] = useState('')
	const [inventory,setInventory] = useState('')
	const [myDoughnutCount,setMyDoughnutCount]= useState('')
	const [buyCount,setByCount] = useState('')
	const [web3,setWeb3] = useState(null) 
	const [address,setAddress] = useState(null)
	const [vmContract,setVmContract] = useState(null)
	const [purchases,setPurchases] = useState(0)
	
	useEffect(()=>{
		setSuccessMsg("doughnut purchased")
		if (vmContract) getInventoryHandler()
		if (vmContract && address) getMyDoughnutCountHandler()
	},[vmContract,address,purchases])
	const getInventoryHandler = async ()=>{
		const inventory = await vmContract.methods.getVendingMachineBalance().call()
		setInventory(inventory)
	}

	const getMyDoughnutCountHandler = async()=>{
		
		const count = await vmContract.methods.donutBalances(address).call()
		setMyDoughnutCount(count)
	}
	const updateDougnutqty = event =>{
		setByCount(event.target.value)
	}
	const buyDonughtHandler = async ()=>{
		try{
			await vmContract.methods.purchase(buyCount).send({
				from: address,
				value: web3.utils.toWei('2','ether')* buyCount
		})
			setPurchases(purchases++)
			setSuccessMsg('${buyCount} doughnuts purchased')
		}catch(err){
			setError(err.messsage)
		}
		
			
	}
	// check if metamask is available
	const connectWalletHandler = async() =>{
		if(typeof window!== "undefined" && typeof window.ethereum !== "undefined"){ 
			try {
			window.ethereum.request({method: "eth_requestAccounts"})
			web3 = new Web3(window.ethereum)
			setWeb3(web3)
			const accounts = await web3.eth.getAccounts()
			setAddress[accounts[0]]

			const vm = vendingMachineContract(web3)
			setVmContract(vm)


			
			console.log("below is window ethereum")
			console.log(window.ethereum)
			} catch(err) {
				SetError(err.message)
				
			}
		}else {
			console.log("please install metamask")
			}	
		}

	return(

			
			<div>
			<Head>
        	<title>Create VendingMachineappp</title>
        	<meta  name="description" content="Generated by create VendingMAchine" />
          	</Head>
          	<nav className="navbar mt-4 mb-4">
          		<div className="container">
	          		<div className = "navbar-brand">
	          			<h1>Vending Machine</h1>

          	</div>
          	<div className = "navbar-end">
          		<button onClick={connectWalletHandler} className="button is-primary">connect wallet </button>
          	</div>
          	</div>
          	</nav>

          	<section>
          	<div className="container">
          		<h2>Vending machine inventory :{inventory}</h2>
          	</div>

          	</section>


          	<section>
          	<div className="container">
          		<h2>My dougnuts :{myDoughnutCount}</h2>
          	</div>

          	</section>


          		<section className="mt-5">
          	<div className="container">
          		 <div className="field">
          		 <label className="label">Buy doughnuts</label>
          		 <div className="control">
          		 <input onChange={updateDougnutqty} className="input" type="type" placeholder="Enter amount"></input>
          		 </div>
          		 <button onClick={buyDonughtHandler} className="button is-primary mt-2">buy</button>
          		 </div>


          		          	</div>

          	</section>


          	<section>
          	<div className="container has-text-danger">
          		<p>{error}</p>
          	</div>

          	</section>
          	          	<section>
          	<div className="container has-text-success">
          		<p>{successMsg}</p>
          	</div>

          	</section>
			</div>
		) 
}
export default VendingMachine;